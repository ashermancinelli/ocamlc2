(*

 * CHECK:       %[[VAL_0:.*]] = ocaml.module @Partial_application : !ocaml.module<"Partial_application", {}> {
 * CHECK:         ocaml.external "print_int" = "ocaml_print_int" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>
 * CHECK:         ocaml.external "+" = "ocaml_add" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>
 * CHECK:         %[[VAL_1:.*]] = ocaml.let "add1" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>> = {
 * CHECK:           %[[VAL_2:.*]] = ocaml.module.lookup "+" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>
 * CHECK:           %[[VAL_3:.*]] = arith.constant 1 : i64
 * CHECK:           %[[VAL_4:.*]] = ocaml.convert %[[VAL_5:.*]] from i64 to !ocaml.box<i64>
 * CHECK:           %[[VAL_6:.*]] = ocaml.closure.curry %[[VAL_7:.*]](%[[VAL_8:.*]]) : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>, (!ocaml.box<i64>) -> !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>
 * CHECK:           ocaml.yield %[[VAL_9:.*]] : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>
 * CHECK:         }
 * CHECK:         %[[VAL_10:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:           %[[VAL_11:.*]] = ocaml.let "two" : !ocaml.box<i64> = {
 * CHECK:             %[[VAL_12:.*]] = arith.constant 1 : i64
 * CHECK:             %[[VAL_13:.*]] = ocaml.convert %[[VAL_14:.*]] from i64 to !ocaml.box<i64>
 * CHECK:             %[[VAL_15:.*]] = ocaml.call %[[VAL_16:.*]](%[[VAL_17:.*]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>) : !ocaml.box<i64> -> !ocaml.box<i64>
 * CHECK:             ocaml.yield %[[VAL_18:.*]] : !ocaml.box<i64>
 * CHECK:           }
 * CHECK:           %[[VAL_19:.*]] = ocaml.module.lookup "print_int" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>
 * CHECK:           %[[VAL_20:.*]] = ocaml.call %[[VAL_21:.*]](%[[VAL_22:.*]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>) : !ocaml.box<i64> -> !ocaml.unit
 * CHECK:           %[[VAL_23:.*]] = ocaml.unit
 * CHECK:           ocaml.yield %[[VAL_24:.*]] : !ocaml.unit
 * CHECK:         }
 * CHECK:       }

 *)
