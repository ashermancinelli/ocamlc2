(*

 * CHECK:       %[[VAL_0:.*]] = ocaml.module @T2 : !ocaml.module<"T2", {}> {
 * CHECK:         %[[VAL_1:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:           %[[VAL_2:.*]] = arith.constant 1 : i64
 * CHECK:           %[[VAL_3:.*]] = ocaml.convert %[[VAL_4:.*]] from i64 to !ocaml.box<i64>
 * CHECK:           %[[VAL_5:.*]] = arith.constant 10 : i64
 * CHECK:           %[[VAL_6:.*]] = ocaml.convert %[[VAL_7:.*]] from i64 to !ocaml.box<i64>
 * CHECK:           %[[VAL_8:.*]] = ocaml.convert %[[VAL_9:.*]] from !ocaml.box<i64> to i64
 * CHECK:           %[[VAL_10:.*]] = ocaml.convert %[[VAL_11:.*]] from !ocaml.box<i64> to i64
 * CHECK:           %[[VAL_12:.*]] = arith.constant 1 : i64
 * CHECK:           scf.for %[[VAL_13:.*]] = %[[VAL_14:.*]] to %[[VAL_15:.*]] step %[[VAL_16:.*]]  : i64 {
 * CHECK:             %[[VAL_17:.*]] = ocaml.convert %[[VAL_18:.*]] from i64 to !ocaml.box<i64>
 * CHECK:             %[[VAL_19:.*]] = ocaml.module.lookup "print_float" : !ocaml.closure<(!ocaml.box<f64>) -> !ocaml.unit>
 * CHECK:             %[[VAL_20:.*]] = ocaml.module.lookup "float_of_int" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<f64>>
 * CHECK:             %[[VAL_21:.*]] = ocaml.call %[[VAL_22:.*]](%[[VAL_23:.*]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<f64>>) : !ocaml.box<i64> -> !ocaml.box<f64>
 * CHECK:             %[[VAL_24:.*]] = ocaml.call %[[VAL_25:.*]](%[[VAL_26:.*]]) : (!ocaml.closure<(!ocaml.box<f64>) -> !ocaml.unit>) : !ocaml.box<f64> -> !ocaml.unit
 * CHECK:             %[[VAL_27:.*]] = ocaml.unit
 * CHECK:           }
 * CHECK:           %[[VAL_28:.*]] = ocaml.unit
 * CHECK:           ocaml.yield %[[VAL_29:.*]] : !ocaml.unit
 * CHECK:         }
 * CHECK:         %[[VAL_30:.*]] = ocaml.let "foo" : !ocaml.closure<(!ocaml.unit) -> !ocaml.box<i64>> = {
 * CHECK:         ^bb0(%[[VAL_31:.*]]: !ocaml.unit):
 * CHECK:           %[[VAL_32:.*]] = ocaml.module.lookup "+" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>
 * CHECK:           %[[VAL_33:.*]] = arith.constant 1 : i64
 * CHECK:           %[[VAL_34:.*]] = ocaml.convert %[[VAL_35:.*]] from i64 to !ocaml.box<i64>
 * CHECK:           %[[VAL_36:.*]] = arith.constant 2 : i64
 * CHECK:           %[[VAL_37:.*]] = ocaml.convert %[[VAL_38:.*]] from i64 to !ocaml.box<i64>
 * CHECK:           %[[VAL_39:.*]] = ocaml.call %[[VAL_40:.*]](%[[VAL_41:.*]], %[[VAL_42:.*]]) : (!ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>) : !ocaml.box<i64>, !ocaml.box<i64> -> !ocaml.box<i64>
 * CHECK:           ocaml.yield %[[VAL_43:.*]] : !ocaml.box<i64>
 * CHECK:         }
 * CHECK:       }

 *)
