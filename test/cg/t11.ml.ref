(*

 * CHECK:       %[[VAL_0:.*]] = ocaml.module @T11 : !ocaml.module<"T11", {}> {
 * CHECK:         ocaml.external "print_newline" = "caml_print_newline" : !ocaml.closure<(!ocaml.unit) -> !ocaml.unit>
 * CHECK:         ocaml.external "print_int" = "caml_print_int" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>
 * CHECK:         ocaml.external "print_string" = "caml_print_string" : !ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>
 * CHECK:         ocaml.external ">=" = "caml_int_ge" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i1>>
 * CHECK:         ocaml.external ">" = "caml_int_gt" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i1>>
 * CHECK:         ocaml.external "=" = "caml_equal" : !ocaml.closure<(!ocaml.obox, !ocaml.obox) -> !ocaml.box<i1>>
 * CHECK:         %[[VAL_1:.*]] = ocaml.module @Array : !ocaml.module<"Array", {}> {
 * CHECK:           ocaml.external "get" = "caml_array_get" : !ocaml.closure<(!ocaml.array<!ocaml.obox>, !ocaml.box<i64>) -> !ocaml.obox>
 * CHECK:           ocaml.external "length" = "caml_array_length" : !ocaml.closure<(!ocaml.array<!ocaml.obox>) -> !ocaml.box<i64>>
 * CHECK:         }
 * CHECK:         %[[VAL_2:.*]] = ocaml.let "find_index" : !ocaml.closure<(!ocaml.obox, !ocaml.array<!ocaml.obox>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>> = {
 * CHECK:         ^bb0(%[[VAL_3:.*]]: !ocaml.obox, %[[VAL_4:.*]]: !ocaml.array<!ocaml.obox>):
 * CHECK:           %[[VAL_5:.*]] = ocaml.block : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>> {
 * CHECK:             %[[VAL_6:.*]] = ocaml.let "aux" {ocaml.recursive} : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>> = {
 * CHECK:             ^bb0(%[[VAL_7:.*]]: !ocaml.box<i64>):
 * CHECK:               %[[VAL_8:.*]] = ocaml.self : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>>
 * CHECK:               %[[VAL_9:.*]] = ocaml.module.lookup ">=" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i1>>
 * CHECK:               %[[VAL_10:.*]] = ocaml.module.lookup "Array.length" : !ocaml.closure<(!ocaml.array<!ocaml.obox>) -> !ocaml.box<i64>>
 * CHECK:               %[[VAL_11:.*]] = ocaml.call %[[VAL_12:.*]](%[[VAL_13:.*]]) : (!ocaml.closure<(!ocaml.array<!ocaml.obox>) -> !ocaml.box<i64>>) : !ocaml.array<!ocaml.obox> -> !ocaml.box<i64>
 * CHECK:               %[[VAL_14:.*]] = ocaml.call %[[VAL_15:.*]](%[[VAL_16:.*]], %[[VAL_17:.*]]) : (!ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i1>>) : !ocaml.box<i64>, !ocaml.box<i64> -> !ocaml.box<i1>
 * CHECK:               %[[VAL_18:.*]] = ocaml.convert %[[VAL_19:.*]] from !ocaml.box<i1> to i1
 * CHECK:               %[[VAL_20:.*]] = scf.if %[[VAL_21:.*]] -> (!ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>) {
 * CHECK:                 %[[VAL_22:.*]] = ocaml.module.lookup "None" : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:                 scf.yield %[[VAL_23:.*]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:               } else {
 * CHECK:                 %[[VAL_24:.*]] = ocaml.module.lookup "=" : !ocaml.closure<(!ocaml.obox, !ocaml.obox) -> !ocaml.box<i1>>
 * CHECK:                 %[[VAL_25:.*]] = ocaml.module.lookup "Array.get" : !ocaml.closure<(!ocaml.array<!ocaml.obox>, !ocaml.box<i64>) -> !ocaml.obox>
 * CHECK:                 %[[VAL_26:.*]] = ocaml.call %[[VAL_27:.*]](%[[VAL_28:.*]], %[[VAL_29:.*]]) : (!ocaml.closure<(!ocaml.array<!ocaml.obox>, !ocaml.box<i64>) -> !ocaml.obox>) : !ocaml.array<!ocaml.obox>, !ocaml.box<i64> -> !ocaml.obox
 * CHECK:                 %[[VAL_30:.*]] = ocaml.call %[[VAL_31:.*]](%[[VAL_32:.*]], %[[VAL_33:.*]]) : (!ocaml.closure<(!ocaml.obox, !ocaml.obox) -> !ocaml.box<i1>>) : !ocaml.obox, !ocaml.obox -> !ocaml.box<i1>
 * CHECK:                 %[[VAL_34:.*]] = ocaml.convert %[[VAL_35:.*]] from !ocaml.box<i1> to i1
 * CHECK:                 %[[VAL_36:.*]] = scf.if %[[VAL_37:.*]] -> (!ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>) {
 * CHECK:                   %[[VAL_38:.*]] = ocaml.module.lookup "Some" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>>
 * CHECK:                   %[[VAL_39:.*]] = ocaml.call %[[VAL_40:.*]](%[[VAL_41:.*]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>>) : !ocaml.box<i64> -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:                   scf.yield %[[VAL_42:.*]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:                 } else {
 * CHECK:                   %[[VAL_43:.*]] = ocaml.module.lookup "+" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>
 * CHECK:                   %[[VAL_44:.*]] = arith.constant 1 : i64
 * CHECK:                   %[[VAL_45:.*]] = ocaml.convert %[[VAL_46:.*]] from i64 to !ocaml.box<i64>
 * CHECK:                   %[[VAL_47:.*]] = ocaml.call %[[VAL_48:.*]](%[[VAL_49:.*]], %[[VAL_50:.*]]) : (!ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>) : !ocaml.box<i64>, !ocaml.box<i64> -> !ocaml.box<i64>
 * CHECK:                   %[[VAL_51:.*]] = ocaml.call %[[VAL_52:.*]](%[[VAL_53:.*]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>>) : !ocaml.box<i64> -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:                   scf.yield %[[VAL_54:.*]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:                 }
 * CHECK:                 scf.yield %[[VAL_55:.*]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:               }
 * CHECK:               ocaml.yield %[[VAL_56:.*]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:             }
 * CHECK:             %[[VAL_57:.*]] = arith.constant 0 : i64
 * CHECK:             %[[VAL_58:.*]] = ocaml.convert %[[VAL_59:.*]] from i64 to !ocaml.box<i64>
 * CHECK:             %[[VAL_60:.*]] = ocaml.call %[[VAL_61:.*]](%[[VAL_62:.*]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>>) : !ocaml.box<i64> -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:             ocaml.yield %[[VAL_63:.*]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:           }
 * CHECK:           ocaml.yield %[[VAL_64:.*]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:         }
 * CHECK:         %[[VAL_65:.*]] = ocaml.let "()" : !ocaml.unit = {
 * CHECK:           %[[VAL_66:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:             %[[VAL_67:.*]] = ocaml.let "arr" : !ocaml.array<!ocaml.box<i64>> = {
 * CHECK:               %[[VAL_68:.*]] = arith.constant 1 : i64
 * CHECK:               %[[VAL_69:.*]] = ocaml.convert %[[VAL_70:.*]] from i64 to !ocaml.box<i64>
 * CHECK:               %[[VAL_71:.*]] = arith.constant 2 : i64
 * CHECK:               %[[VAL_72:.*]] = ocaml.convert %[[VAL_73:.*]] from i64 to !ocaml.box<i64>
 * CHECK:               %[[VAL_74:.*]] = arith.constant 3 : i64
 * CHECK:               %[[VAL_75:.*]] = ocaml.convert %[[VAL_76:.*]] from i64 to !ocaml.box<i64>
 * CHECK:               %[[VAL_77:.*]] = arith.constant 4 : i64
 * CHECK:               %[[VAL_78:.*]] = ocaml.convert %[[VAL_79:.*]] from i64 to !ocaml.box<i64>
 * CHECK:               %[[VAL_80:.*]] = arith.constant 5 : i64
 * CHECK:               %[[VAL_81:.*]] = ocaml.convert %[[VAL_82:.*]] from i64 to !ocaml.box<i64>
 * CHECK:               %[[VAL_83:.*]] = ocaml.array.from_elements{{\[}}%[[VAL_84:.*]], %[[VAL_85:.*]], %[[VAL_86:.*]], %[[VAL_87:.*]], %[[VAL_88:.*]]] : !ocaml.box<i64>, !ocaml.box<i64>, !ocaml.box<i64>, !ocaml.box<i64>, !ocaml.box<i64> -> <!ocaml.box<i64>>
 * CHECK:               ocaml.yield %[[VAL_89:.*]] : !ocaml.array<!ocaml.box<i64>>
 * CHECK:             }
 * CHECK:             %[[VAL_90:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:               %[[VAL_91:.*]] = ocaml.let "index" : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>> = {
 * CHECK:                 %[[VAL_92:.*]] = arith.constant 3 : i64
 * CHECK:                 %[[VAL_93:.*]] = ocaml.convert %[[VAL_94:.*]] from i64 to !ocaml.box<i64>
 * CHECK:                 %[[VAL_95:.*]] = ocaml.convert %[[VAL_96:.*]] from !ocaml.box<i64> to !ocaml.obox
 * CHECK:                 %[[VAL_97:.*]] = ocaml.convert %[[VAL_98:.*]] from !ocaml.array<!ocaml.box<i64>> to !ocaml.array<!ocaml.obox>
 * CHECK:                 %[[VAL_99:.*]] = ocaml.call %[[VAL_100:.*]](%[[VAL_101:.*]], %[[VAL_102:.*]]) : (!ocaml.closure<(!ocaml.obox, !ocaml.array<!ocaml.obox>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>>) : !ocaml.box<i64>, !ocaml.array<!ocaml.box<i64>> -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:                 ocaml.yield %[[VAL_103:.*]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:               }
 * CHECK:               %[[VAL_104:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:                 %[[VAL_105:.*]] = ocaml.module.lookup "None" : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:                 %[[VAL_106:.*]] = ocaml.match %[[VAL_107:.*]] against %[[VAL_108:.*]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:                 cf.cond_br %[[VAL_109:.*]], ^bb1, ^bb2
 * CHECK:               ^bb1:
 * CHECK:                 %[[VAL_110:.*]] = ocaml.module.lookup "print_string" : !ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>
 * CHECK:                 %[[VAL_111:.*]] = ocaml.embox_string "3 not found in array"
 * CHECK:                 %[[VAL_112:.*]] = ocaml.call %[[VAL_113:.*]](%[[VAL_114:.*]]) : (!ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>) : !ocaml.sbox -> !ocaml.unit
 * CHECK:                 %[[VAL_115:.*]] = ocaml.module.lookup "print_newline" : !ocaml.closure<(!ocaml.unit) -> !ocaml.unit>
 * CHECK:                 %[[VAL_116:.*]] = ocaml.unit
 * CHECK:                 %[[VAL_117:.*]] = ocaml.call %[[VAL_118:.*]](%[[VAL_119:.*]]) : (!ocaml.closure<(!ocaml.unit) -> !ocaml.unit>) : !ocaml.unit -> !ocaml.unit
 * CHECK:                 cf.br ^bb5(%[[VAL_120:.*]] : !ocaml.unit)
 * CHECK:               ^bb2:
 * CHECK:                 %[[VAL_121:.*]] = ocaml.module.lookup "Some" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>>
 * CHECK:                 %[[VAL_122:.*]] = ocaml.pattern_variable : !ocaml.box<i64>
 * CHECK:                 %[[VAL_123:.*]] = ocaml.call %[[VAL_124:.*]](%[[VAL_125:.*]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>>) : !ocaml.box<i64> -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:                 %[[VAL_126:.*]] = ocaml.match %[[VAL_127:.*]] against %[[VAL_128:.*]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:                 cf.cond_br %[[VAL_129:.*]], ^bb3, ^bb4
 * CHECK:               ^bb3:
 * CHECK:                 %[[VAL_130:.*]] = ocaml.module.lookup "print_string" : !ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>
 * CHECK:                 %[[VAL_131:.*]] = ocaml.embox_string "Index of 3: "
 * CHECK:                 %[[VAL_132:.*]] = ocaml.call %[[VAL_133:.*]](%[[VAL_134:.*]]) : (!ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>) : !ocaml.sbox -> !ocaml.unit
 * CHECK:                 %[[VAL_135:.*]] = ocaml.module.lookup "print_int" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>
 * CHECK:                 %[[VAL_136:.*]] = ocaml.call %[[VAL_137:.*]](%[[VAL_138:.*]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>) : !ocaml.box<i64> -> !ocaml.unit
 * CHECK:                 %[[VAL_139:.*]] = ocaml.module.lookup "print_newline" : !ocaml.closure<(!ocaml.unit) -> !ocaml.unit>
 * CHECK:                 %[[VAL_140:.*]] = ocaml.unit
 * CHECK:                 %[[VAL_141:.*]] = ocaml.call %[[VAL_142:.*]](%[[VAL_143:.*]]) : (!ocaml.closure<(!ocaml.unit) -> !ocaml.unit>) : !ocaml.unit -> !ocaml.unit
 * CHECK:                 cf.br ^bb5(%[[VAL_144:.*]] : !ocaml.unit)
 * CHECK:               ^bb4:
 * CHECK:                 %[[VAL_145:.*]] = arith.constant false
 * CHECK:                 cf.assert %[[VAL_146:.*]], "No match found"
 * CHECK:                 %[[VAL_147:.*]] = ocaml.convert %[[VAL_148:.*]] from i1 to !ocaml.unit
 * CHECK:                 cf.br ^bb5(%[[VAL_149:.*]] : !ocaml.unit)
 * CHECK:               ^bb5(%[[VAL_150:.*]]: !ocaml.unit):
 * CHECK:                 ocaml.yield %[[VAL_151:.*]] : !ocaml.unit
 * CHECK:               }
 * CHECK:               %[[VAL_152:.*]] = ocaml.unit
 * CHECK:               ocaml.yield %[[VAL_153:.*]] : !ocaml.unit
 * CHECK:             }
 * CHECK:             %[[VAL_154:.*]] = ocaml.unit
 * CHECK:             ocaml.yield %[[VAL_155:.*]] : !ocaml.unit
 * CHECK:           }
 * CHECK:           ocaml.yield %[[VAL_156:.*]] : !ocaml.unit
 * CHECK:         }
 * CHECK:       }

 *)
