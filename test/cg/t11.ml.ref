(*
 * NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

 * The script is designed to make adding checks to
 * a test case fast, it is *not* designed to be authoritative
 * about what constitutes a good test! The CHECK should be
 * minimized and named to reflect the test intent.


 * CHECK-LABEL:   func.func private @print_newline(!ocaml.unit) -> !ocaml.unit attributes {ocaml.unresolved}
 * CHECK:         func.func private @print_int(!ocaml.box<i64>) -> !ocaml.unit attributes {ocaml.unresolved}
 * CHECK:         func.func private @print_string(!ocaml.sbox) -> !ocaml.unit attributes {ocaml.unresolved}
 * CHECK:         func.func private @"+"(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64> attributes {ocaml.unresolved}
 * CHECK:         func.func private @Some(!ocaml.box<i64>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>> attributes {ocaml.unresolved}
 * CHECK:         func.func private @"="(!ocaml.obox, !ocaml.obox) -> !ocaml.box<i1> attributes {ocaml.unresolved}

 * CHECK-LABEL:   func.func private @None() -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>> attributes {ocaml.variant_ctor} {
 * CHECK:           %[[VAL_0:.*]] = arith.constant 0 : i64
 * CHECK:           %[[VAL_1:.*]] = ocaml.builtin "variant_ctor_empty"(%[[VAL_0]]) : i64 -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:           return %[[VAL_1]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:         }
 * CHECK:         func.func private @Array.length(!ocaml.array<!ocaml.obox>) -> !ocaml.box<i64> attributes {ocaml.unresolved}
 * CHECK:         func.func private @">="(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i1> attributes {ocaml.unresolved}

 * CHECK-LABEL:   func.func private @aux(
 * CHECK-SAME:                           %[[VAL_0:[0-9]+|[a-zA-Z$._-][a-zA-Z0-9$._-]*]]: !ocaml.box<i64>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>> attributes {ocaml.env = "auxenv$1", ocaml.recursive} {
 * CHECK:           %[[VAL_1:.*]] = ocaml.closure.env.get_current : !ocaml.env
 * CHECK:           %[[VAL_2:.*]] = ocaml.closure.env.get %[[VAL_1]]["item"] -> !ocaml.obox
 * CHECK:           %[[VAL_3:.*]] = ocaml.closure.env.get_current : !ocaml.env
 * CHECK:           %[[VAL_4:.*]] = ocaml.closure.env.get %[[VAL_3]]["arr"] -> !ocaml.array<!ocaml.obox>
 * CHECK:           %[[VAL_5:.*]] = ocaml.closure.new @Array.length : !ocaml.closure<(!ocaml.array<!ocaml.obox>) -> !ocaml.box<i64>>
 * CHECK:           %[[VAL_6:.*]] = ocaml.call %[[VAL_5]](%[[VAL_4]]) : (!ocaml.closure<(!ocaml.array<!ocaml.obox>) -> !ocaml.box<i64>>) : !ocaml.array<!ocaml.obox> -> !ocaml.box<i64>
 * CHECK:           %[[VAL_7:.*]] = ocaml.closure.new @">=" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i1>>
 * CHECK:           %[[VAL_8:.*]] = ocaml.call %[[VAL_7]](%[[VAL_0]], %[[VAL_6]]) : (!ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i1>>) : !ocaml.box<i64>, !ocaml.box<i64> -> !ocaml.box<i1>
 * CHECK:           %[[VAL_9:.*]] = ocaml.convert %[[VAL_8]] from !ocaml.box<i1> to i1
 * CHECK:           %[[VAL_10:.*]] = scf.if %[[VAL_9]] -> (!ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>) {
 * CHECK:             %[[VAL_11:.*]] = func.call @None() : () -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:             scf.yield %[[VAL_11]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:           } else {
 * CHECK:             %[[VAL_12:.*]] = ocaml.convert %[[VAL_0]] from !ocaml.box<i64> to i64
 * CHECK:             %[[VAL_13:.*]] = ocaml.array.get %[[VAL_4]]{{\[}}%[[VAL_12]]] : <!ocaml.obox>, i64 -> !ocaml.obox
 * CHECK:             %[[VAL_14:.*]] = ocaml.closure.new @"=" : !ocaml.closure<(!ocaml.obox, !ocaml.obox) -> !ocaml.box<i1>>
 * CHECK:             %[[VAL_15:.*]] = ocaml.call %[[VAL_14]](%[[VAL_13]], %[[VAL_2]]) : (!ocaml.closure<(!ocaml.obox, !ocaml.obox) -> !ocaml.box<i1>>) : !ocaml.obox, !ocaml.obox -> !ocaml.box<i1>
 * CHECK:             %[[VAL_16:.*]] = ocaml.convert %[[VAL_15]] from !ocaml.box<i1> to i1
 * CHECK:             %[[VAL_17:.*]] = scf.if %[[VAL_16]] -> (!ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>) {
 * CHECK:               %[[VAL_18:.*]] = ocaml.closure.new @Some : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>>
 * CHECK:               %[[VAL_19:.*]] = ocaml.call %[[VAL_18]](%[[VAL_0]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>>) : !ocaml.box<i64> -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:               scf.yield %[[VAL_19]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:             } else {
 * CHECK:               %[[VAL_20:.*]] = arith.constant 1 : i64
 * CHECK:               %[[VAL_21:.*]] = ocaml.convert %[[VAL_20]] from i64 to !ocaml.box<i64>
 * CHECK:               %[[VAL_22:.*]] = ocaml.closure.new @"+" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>
 * CHECK:               %[[VAL_23:.*]] = ocaml.call %[[VAL_22]](%[[VAL_0]], %[[VAL_21]]) : (!ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>) : !ocaml.box<i64>, !ocaml.box<i64> -> !ocaml.box<i64>
 * CHECK:               %[[VAL_24:.*]] = ocaml.closure.env.get_current : !ocaml.env
 * CHECK:               %[[VAL_25:.*]] = ocaml.closure.new @aux capturing %[[VAL_24]] : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>>
 * CHECK:               %[[VAL_26:.*]] = ocaml.call %[[VAL_25]](%[[VAL_23]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>>) : !ocaml.box<i64> -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:               scf.yield %[[VAL_26]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:             }
 * CHECK:             scf.yield %[[VAL_17]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:           }
 * CHECK:           return %[[VAL_10]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:         }

 * CHECK-LABEL:   func.func private @find_index(
 * CHECK-SAME:                                  %[[VAL_0:[0-9]+|[a-zA-Z$._-][a-zA-Z0-9$._-]*]]: !ocaml.obox,
 * CHECK-SAME:                                  %[[VAL_1:[0-9]+|[a-zA-Z$._-][a-zA-Z0-9$._-]*]]: !ocaml.array<!ocaml.obox>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>> attributes {ocaml.env = "find_indexenv$0"} {
 * CHECK:           %[[VAL_2:.*]] = ocaml.block : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>> {
 * CHECK:             %[[VAL_3:.*]] = ocaml.closure.env.new {ocaml.env_for_function = "auxenv$1"} : !ocaml.env
 * CHECK:             ocaml.closure.env.capture %[[VAL_3]]["item"] = %[[VAL_0]] : !ocaml.obox
 * CHECK:             ocaml.closure.env.capture %[[VAL_3]]["arr"] = %[[VAL_1]] : !ocaml.array<!ocaml.obox>
 * CHECK:             %[[VAL_4:.*]] = ocaml.closure.new @aux capturing %[[VAL_3]] : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>>
 * CHECK:             %[[VAL_5:.*]] = arith.constant 0 : i64
 * CHECK:             %[[VAL_6:.*]] = ocaml.convert %[[VAL_5]] from i64 to !ocaml.box<i64>
 * CHECK:             %[[VAL_7:.*]] = ocaml.call %[[VAL_4]](%[[VAL_6]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>>) : !ocaml.box<i64> -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:             ocaml.yield %[[VAL_7]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:           }
 * CHECK:           return %[[VAL_2]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:         }

 * CHECK-LABEL:   ocaml.program : {
 * CHECK:           %[[VAL_0:.*]] = ocaml.closure.env.new {ocaml.env_for_function = "find_indexenv$0"} : !ocaml.env
 * CHECK:           %[[VAL_1:.*]] = ocaml.closure.new @find_index capturing %[[VAL_0]] : !ocaml.closure<(!ocaml.obox, !ocaml.array<!ocaml.obox>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>>
 * CHECK:           %[[VAL_2:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:             %[[VAL_3:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:               %[[VAL_4:.*]] = ocaml.block : !ocaml.array<!ocaml.box<i64>> {
 * CHECK:                 %[[VAL_5:.*]] = arith.constant 1 : i64
 * CHECK:                 %[[VAL_6:.*]] = ocaml.convert %[[VAL_5]] from i64 to !ocaml.box<i64>
 * CHECK:                 %[[VAL_7:.*]] = arith.constant 2 : i64
 * CHECK:                 %[[VAL_8:.*]] = ocaml.convert %[[VAL_7]] from i64 to !ocaml.box<i64>
 * CHECK:                 %[[VAL_9:.*]] = arith.constant 3 : i64
 * CHECK:                 %[[VAL_10:.*]] = ocaml.convert %[[VAL_9]] from i64 to !ocaml.box<i64>
 * CHECK:                 %[[VAL_11:.*]] = arith.constant 4 : i64
 * CHECK:                 %[[VAL_12:.*]] = ocaml.convert %[[VAL_11]] from i64 to !ocaml.box<i64>
 * CHECK:                 %[[VAL_13:.*]] = arith.constant 5 : i64
 * CHECK:                 %[[VAL_14:.*]] = ocaml.convert %[[VAL_13]] from i64 to !ocaml.box<i64>
 * CHECK:                 %[[VAL_15:.*]] = ocaml.array.from_elements{{\[}}%[[VAL_6]], %[[VAL_8]], %[[VAL_10]], %[[VAL_12]], %[[VAL_14]]] : !ocaml.box<i64>, !ocaml.box<i64>, !ocaml.box<i64>, !ocaml.box<i64>, !ocaml.box<i64> -> <!ocaml.box<i64>>
 * CHECK:                 ocaml.yield %[[VAL_15]] : !ocaml.array<!ocaml.box<i64>>
 * CHECK:               }
 * CHECK:               %[[VAL_16:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:                 %[[VAL_17:.*]] = ocaml.block : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>> {
 * CHECK:                   %[[VAL_18:.*]] = arith.constant 3 : i64
 * CHECK:                   %[[VAL_19:.*]] = ocaml.convert %[[VAL_18]] from i64 to !ocaml.box<i64>
 * CHECK:                   %[[VAL_20:.*]] = ocaml.convert %[[VAL_19]] from !ocaml.box<i64> to !ocaml.obox
 * CHECK:                   %[[VAL_21:.*]] = ocaml.convert %[[VAL_4]] from !ocaml.array<!ocaml.box<i64>> to !ocaml.array<!ocaml.obox>
 * CHECK:                   %[[VAL_22:.*]] = ocaml.call %[[VAL_1]](%[[VAL_19]], %[[VAL_4]]) : (!ocaml.closure<(!ocaml.obox, !ocaml.array<!ocaml.obox>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>>) : !ocaml.box<i64>, !ocaml.array<!ocaml.box<i64>> -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:                   ocaml.yield %[[VAL_22]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:                 }
 * CHECK:                 %[[VAL_23:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:                   %[[VAL_24:.*]] = func.call @None() : () -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:                   %[[VAL_25:.*]] = ocaml.match %[[VAL_17]] against %[[VAL_24]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:                   cf.cond_br %[[VAL_25]], ^bb1, ^bb2
 * CHECK:                 ^bb1:
 * CHECK:                   %[[VAL_26:.*]] = ocaml.embox_string "3 not found in array"
 * CHECK:                   %[[VAL_27:.*]] = ocaml.closure.new @print_string : !ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>
 * CHECK:                   %[[VAL_28:.*]] = ocaml.call %[[VAL_27]](%[[VAL_26]]) : (!ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>) : !ocaml.sbox -> !ocaml.unit
 * CHECK:                   %[[VAL_29:.*]] = ocaml.unit
 * CHECK:                   %[[VAL_30:.*]] = ocaml.closure.new @print_newline : !ocaml.closure<(!ocaml.unit) -> !ocaml.unit>
 * CHECK:                   %[[VAL_31:.*]] = ocaml.call %[[VAL_30]](%[[VAL_29]]) : (!ocaml.closure<(!ocaml.unit) -> !ocaml.unit>) : !ocaml.unit -> !ocaml.unit
 * CHECK:                   cf.br ^bb5(%[[VAL_31]] : !ocaml.unit)
 * CHECK:                 ^bb2:
 * CHECK:                   %[[VAL_32:.*]] = ocaml.pattern_variable : !ocaml.box<i64>
 * CHECK:                   %[[VAL_33:.*]] = func.call @Some(%[[VAL_32]]) : (!ocaml.box<i64>) -> !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:                   %[[VAL_34:.*]] = ocaml.match %[[VAL_17]] against %[[VAL_33]] : !ocaml.variant<"option" is "None" | "Some" of !ocaml.box<i64>>
 * CHECK:                   cf.cond_br %[[VAL_34]], ^bb3, ^bb4
 * CHECK:                 ^bb3:
 * CHECK:                   %[[VAL_35:.*]] = ocaml.embox_string "Index of 3: "
 * CHECK:                   %[[VAL_36:.*]] = ocaml.closure.new @print_string : !ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>
 * CHECK:                   %[[VAL_37:.*]] = ocaml.call %[[VAL_36]](%[[VAL_35]]) : (!ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>) : !ocaml.sbox -> !ocaml.unit
 * CHECK:                   %[[VAL_38:.*]] = ocaml.closure.new @print_int : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>
 * CHECK:                   %[[VAL_39:.*]] = ocaml.call %[[VAL_38]](%[[VAL_32]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>) : !ocaml.box<i64> -> !ocaml.unit
 * CHECK:                   %[[VAL_40:.*]] = ocaml.unit
 * CHECK:                   %[[VAL_41:.*]] = ocaml.closure.new @print_newline : !ocaml.closure<(!ocaml.unit) -> !ocaml.unit>
 * CHECK:                   %[[VAL_42:.*]] = ocaml.call %[[VAL_41]](%[[VAL_40]]) : (!ocaml.closure<(!ocaml.unit) -> !ocaml.unit>) : !ocaml.unit -> !ocaml.unit
 * CHECK:                   cf.br ^bb5(%[[VAL_42]] : !ocaml.unit)
 * CHECK:                 ^bb4:
 * CHECK:                   %[[VAL_43:.*]] = arith.constant false
 * CHECK:                   cf.assert %[[VAL_43]], "No match found"
 * CHECK:                   %[[VAL_44:.*]] = ocaml.convert %[[VAL_43]] from i1 to !ocaml.unit
 * CHECK:                   cf.br ^bb5(%[[VAL_44]] : !ocaml.unit)
 * CHECK:                 ^bb5(%[[VAL_45:.*]]: !ocaml.unit):
 * CHECK:                   ocaml.yield %[[VAL_45]] : !ocaml.unit
 * CHECK:                 }
 * CHECK:                 %[[VAL_46:.*]] = ocaml.unit
 * CHECK:                 ocaml.yield %[[VAL_46]] : !ocaml.unit
 * CHECK:               }
 * CHECK:               %[[VAL_47:.*]] = ocaml.unit
 * CHECK:               ocaml.yield %[[VAL_47]] : !ocaml.unit
 * CHECK:             }
 * CHECK:             ocaml.yield %[[VAL_3]] : !ocaml.unit
 * CHECK:           }
 * CHECK:         }

 *)
