(*

 * CHECK:       %[[VAL_0:.*]] = ocaml.module @Rec : !ocaml.module<"Rec", {}> {
 * CHECK:         %[[VAL_1:.*]] = ocaml.let "f" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>> = {
 * CHECK:         ^bb0(%[[VAL_2:.*]]: !ocaml.box<i64>):
 * CHECK:           %[[VAL_3:.*]] = ocaml.block : !ocaml.box<i64> {
 * CHECK:             %[[VAL_4:.*]] = ocaml.let "two" : !ocaml.closure<(!ocaml.unit) -> !ocaml.box<i64>> = {
 * CHECK:             ^bb0(%[[VAL_5:.*]]: !ocaml.unit):
 * CHECK:               %[[VAL_6:.*]] = ocaml.module.lookup "+" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>
 * CHECK:               %[[VAL_7:.*]] = arith.constant 2 : i64
 * CHECK:               %[[VAL_8:.*]] = ocaml.convert %[[VAL_9:.*]] from i64 to !ocaml.box<i64>
 * CHECK:               %[[VAL_10:.*]] = ocaml.call %[[VAL_11:.*]](%[[VAL_12:.*]], %[[VAL_13:.*]]) : (!ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>) : !ocaml.box<i64>, !ocaml.box<i64> -> !ocaml.box<i64>
 * CHECK:               ocaml.yield %[[VAL_14:.*]] : !ocaml.box<i64>
 * CHECK:             }
 * CHECK:             %[[VAL_15:.*]] = ocaml.unit
 * CHECK:             %[[VAL_16:.*]] = ocaml.call %[[VAL_17:.*]](%[[VAL_18:.*]]) : (!ocaml.closure<(!ocaml.unit) -> !ocaml.box<i64>>) : !ocaml.unit -> !ocaml.box<i64>
 * CHECK:             ocaml.yield %[[VAL_19:.*]] : !ocaml.box<i64>
 * CHECK:           }
 * CHECK:           ocaml.yield %[[VAL_20:.*]] : !ocaml.box<i64>
 * CHECK:         }
 * CHECK:         %[[VAL_21:.*]] = arith.constant 5 : i64
 * CHECK:         %[[VAL_22:.*]] = ocaml.convert %[[VAL_23:.*]] from i64 to !ocaml.box<i64>
 * CHECK:         %[[VAL_24:.*]] = ocaml.call %[[VAL_25:.*]](%[[VAL_26:.*]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>) : !ocaml.box<i64> -> !ocaml.box<i64>
 * CHECK:       }

 *)
