(*
 * NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

 * The script is designed to make adding checks to
 * a test case fast, it is *not* designed to be authoritative
 * about what constitutes a good test! The CHECK should be
 * minimized and named to reflect the test intent.


 * CHECK-LABEL:   func.func private @foo(!ocaml.box<i64>) -> !ocaml.box<i64> attributes {bindc = "foo_bindc"}

 * CHECK-LABEL:   ocaml.program : {
 * CHECK:           %[[VAL_0:.*]] = ocaml.closure.env.new : !ocaml.env
 * CHECK:           %[[VAL_1:.*]] = ocaml.closure.new @foo capturing %[[VAL_0]] : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>
 * CHECK:           %[[VAL_2:.*]] = arith.constant 10 : i64
 * CHECK:           %[[VAL_3:.*]] = ocaml.convert %[[VAL_2]] from i64 to !ocaml.box<i64>
 * CHECK:           %[[VAL_4:.*]] = func.call @foo(%[[VAL_3]]) : (!ocaml.box<i64>) -> !ocaml.box<i64>
 * CHECK:         }

 *)
