(*

 * CHECK:       %[[VAL_0:.*]] = ocaml.module @T7 : !ocaml.module<"T7", {}> {
 * CHECK:         %[[VAL_1:.*]] = ocaml.module.lookup "A" : !ocaml.variant<"l" is "A" | "B" of !ocaml.box<i64> | "C" of tuple<!ocaml.box<i64>, !ocaml.box<i64>>>
 * CHECK:         %[[VAL_2:.*]] = ocaml.module.lookup "B" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"l" is "A" | "B" of !ocaml.box<i64> | "C" of tuple<!ocaml.box<i64>, !ocaml.box<i64>>>>
 * CHECK:         %[[VAL_3:.*]] = arith.constant 5 : i64
 * CHECK:         %[[VAL_4:.*]] = ocaml.convert %[[VAL_5:.*]] from i64 to !ocaml.box<i64>
 * CHECK:         %[[VAL_6:.*]] = ocaml.call %[[VAL_7:.*]](%[[VAL_8:.*]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"l" is "A" | "B" of !ocaml.box<i64> | "C" of tuple<!ocaml.box<i64>, !ocaml.box<i64>>>>) : !ocaml.box<i64> -> !ocaml.variant<"l" is "A" | "B" of !ocaml.box<i64> | "C" of tuple<!ocaml.box<i64>, !ocaml.box<i64>>>
 * CHECK:         %[[VAL_9:.*]] = ocaml.block : !ocaml.box<i64> {
 * CHECK:           %[[VAL_10:.*]] = ocaml.let "bval" : !ocaml.variant<"l" is "A" | "B" of !ocaml.box<i64> | "C" of tuple<!ocaml.box<i64>, !ocaml.box<i64>>> = {
 * CHECK:             %[[VAL_11:.*]] = ocaml.module.lookup "B" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"l" is "A" | "B" of !ocaml.box<i64> | "C" of tuple<!ocaml.box<i64>, !ocaml.box<i64>>>>
 * CHECK:             %[[VAL_12:.*]] = arith.constant 2 : i64
 * CHECK:             %[[VAL_13:.*]] = ocaml.convert %[[VAL_14:.*]] from i64 to !ocaml.box<i64>
 * CHECK:             %[[VAL_15:.*]] = ocaml.call %[[VAL_16:.*]](%[[VAL_17:.*]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"l" is "A" | "B" of !ocaml.box<i64> | "C" of tuple<!ocaml.box<i64>, !ocaml.box<i64>>>>) : !ocaml.box<i64> -> !ocaml.variant<"l" is "A" | "B" of !ocaml.box<i64> | "C" of tuple<!ocaml.box<i64>, !ocaml.box<i64>>>
 * CHECK:             ocaml.yield %[[VAL_18:.*]] : !ocaml.variant<"l" is "A" | "B" of !ocaml.box<i64> | "C" of tuple<!ocaml.box<i64>, !ocaml.box<i64>>>
 * CHECK:           }
 * CHECK:           %[[VAL_19:.*]] = ocaml.block : !ocaml.box<i64> {
 * CHECK:             %[[VAL_20:.*]] = ocaml.let "x" : !ocaml.box<i64> = {
 * CHECK:               %[[VAL_21:.*]] = ocaml.block : !ocaml.box<i64> {
 * CHECK:                 %[[VAL_22:.*]] = ocaml.pattern_variable : !ocaml.obox
 * CHECK:                 %[[VAL_23:.*]] = ocaml.convert %[[VAL_24:.*]] from !ocaml.obox to !ocaml.variant<"l" is "A" | "B" of !ocaml.box<i64> | "C" of tuple<!ocaml.box<i64>, !ocaml.box<i64>>>
 * CHECK:                 %[[VAL_25:.*]] = ocaml.match %[[VAL_26:.*]] against %[[VAL_27:.*]] : !ocaml.variant<"l" is "A" | "B" of !ocaml.box<i64> | "C" of tuple<!ocaml.box<i64>, !ocaml.box<i64>>>
 * CHECK:                 cf.cond_br %[[VAL_28:.*]], ^bb1, ^bb2
 * CHECK:               ^bb1:
 * CHECK:                 %[[VAL_29:.*]] = arith.constant 1 : i64
 * CHECK:                 %[[VAL_30:.*]] = ocaml.convert %[[VAL_31:.*]] from i64 to !ocaml.box<i64>
 * CHECK:                 cf.br ^bb5(%[[VAL_32:.*]] : !ocaml.box<i64>)
 * CHECK:               ^bb2:
 * CHECK:                 %[[VAL_33:.*]] = ocaml.module.lookup "A" : !ocaml.variant<"l" is "A" | "B" of !ocaml.box<i64> | "C" of tuple<!ocaml.box<i64>, !ocaml.box<i64>>>
 * CHECK:                 %[[VAL_34:.*]] = ocaml.match %[[VAL_35:.*]] against %[[VAL_36:.*]] : !ocaml.variant<"l" is "A" | "B" of !ocaml.box<i64> | "C" of tuple<!ocaml.box<i64>, !ocaml.box<i64>>>
 * CHECK:                 cf.cond_br %[[VAL_37:.*]], ^bb3, ^bb4
 * CHECK:               ^bb3:
 * CHECK:                 %[[VAL_38:.*]] = arith.constant 0 : i64
 * CHECK:                 %[[VAL_39:.*]] = ocaml.convert %[[VAL_40:.*]] from i64 to !ocaml.box<i64>
 * CHECK:                 cf.br ^bb5(%[[VAL_41:.*]] : !ocaml.box<i64>)
 * CHECK:               ^bb4:
 * CHECK:                 %[[VAL_42:.*]] = arith.constant false
 * CHECK:                 cf.assert %[[VAL_43:.*]], "No match found"
 * CHECK:                 %[[VAL_44:.*]] = ocaml.convert %[[VAL_45:.*]] from i1 to !ocaml.box<i64>
 * CHECK:                 cf.br ^bb5(%[[VAL_46:.*]] : !ocaml.box<i64>)
 * CHECK:               ^bb5(%[[VAL_47:.*]]: !ocaml.box<i64>):
 * CHECK:                 ocaml.yield %[[VAL_48:.*]] : !ocaml.box<i64>
 * CHECK:               }
 * CHECK:               ocaml.yield %[[VAL_49:.*]] : !ocaml.box<i64>
 * CHECK:             }
 * CHECK:             ocaml.yield %[[VAL_50:.*]] : !ocaml.box<i64>
 * CHECK:           }
 * CHECK:           ocaml.yield %[[VAL_51:.*]] : !ocaml.box<i64>
 * CHECK:         }
 * CHECK:       }

 *)
