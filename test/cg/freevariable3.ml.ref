(*

 * CHECK:       %[[VAL_0:.*]] = ocaml.module @Freevariable3 : !ocaml.module<"Freevariable3", {}> {
 * CHECK:         %[[VAL_1:.*]] = ocaml.let "make_adders" : !ocaml.closure<(!ocaml.unit) -> !ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>> = {
 * CHECK:         ^bb0(%[[VAL_2:.*]]: !ocaml.unit):
 * CHECK:           %[[VAL_3:.*]] = ocaml.block : !ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>> {
 * CHECK:             %[[VAL_4:.*]] = ocaml.let "result" : !ocaml.ref<!ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>> = {
 * CHECK:               %[[VAL_5:.*]] = ocaml.module.lookup "ref" : !ocaml.closure<(!ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>) -> !ocaml.ref<!ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>>>
 * CHECK:               %[[VAL_6:.*]] = ocaml.undef : !ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>
 * CHECK:               %[[VAL_7:.*]] = ocaml.call %[[VAL_8:.*]](%[[VAL_9:.*]]) : (!ocaml.closure<(!ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>) -> !ocaml.ref<!ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>>>) : !ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>> -> !ocaml.ref<!ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>>
 * CHECK:               ocaml.yield %[[VAL_10:.*]] : !ocaml.ref<!ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>>
 * CHECK:             }
 * CHECK:             %[[VAL_11:.*]] = arith.constant 1 : i64
 * CHECK:             %[[VAL_12:.*]] = ocaml.convert %[[VAL_13:.*]] from i64 to !ocaml.box<i64>
 * CHECK:             %[[VAL_14:.*]] = arith.constant 3 : i64
 * CHECK:             %[[VAL_15:.*]] = ocaml.convert %[[VAL_16:.*]] from i64 to !ocaml.box<i64>
 * CHECK:             %[[VAL_17:.*]] = ocaml.convert %[[VAL_18:.*]] from !ocaml.box<i64> to i64
 * CHECK:             %[[VAL_19:.*]] = ocaml.convert %[[VAL_20:.*]] from !ocaml.box<i64> to i64
 * CHECK:             %[[VAL_21:.*]] = arith.constant 1 : i64
 * CHECK:             scf.for %[[VAL_22:.*]] = %[[VAL_23:.*]] to %[[VAL_24:.*]] step %[[VAL_25:.*]]  : i64 {
 * CHECK:               %[[VAL_26:.*]] = ocaml.convert %[[VAL_27:.*]] from i64 to !ocaml.box<i64>
 * CHECK:               %[[VAL_28:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:                 %[[VAL_29:.*]] = ocaml.let "f" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>> = {
 * CHECK:                   %[[VAL_30:.*]] = ocaml.let "funexpr$0" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>> = {
 * CHECK:                   ^bb0(%[[VAL_31:.*]]: !ocaml.box<i64>):
 * CHECK:                     %[[VAL_32:.*]] = ocaml.module.lookup "+" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>
 * CHECK:                     %[[VAL_33:.*]] = ocaml.call %[[VAL_34:.*]](%[[VAL_35:.*]], %[[VAL_36:.*]]) : (!ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>) : !ocaml.box<i64>, !ocaml.box<i64> -> !ocaml.box<i64>
 * CHECK:                     ocaml.yield %[[VAL_37:.*]] : !ocaml.box<i64>
 * CHECK:                   }
 * CHECK:                   ocaml.yield %[[VAL_38:.*]] : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>
 * CHECK:                 }
 * CHECK:                 %[[VAL_39:.*]] = ocaml.module.lookup ":=" : !ocaml.closure<(!ocaml.ref<!ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>>, !ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>) -> !ocaml.unit>
 * CHECK:                 %[[VAL_40:.*]] = ocaml.module.lookup "!" : !ocaml.closure<(!ocaml.ref<!ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>>) -> !ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>>
 * CHECK:                 %[[VAL_41:.*]] = ocaml.call %[[VAL_42:.*]](%[[VAL_43:.*]]) : (!ocaml.closure<(!ocaml.ref<!ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>>) -> !ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>>) : !ocaml.ref<!ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>> -> !ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>
 * CHECK:                 %[[VAL_44:.*]] = ocaml.list.cons %[[VAL_45:.*]] :: %[[VAL_46:.*]] : !ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>
 * CHECK:                 %[[VAL_47:.*]] = ocaml.call %[[VAL_48:.*]](%[[VAL_49:.*]], %[[VAL_50:.*]]) : (!ocaml.closure<(!ocaml.ref<!ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>>, !ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>) -> !ocaml.unit>) : !ocaml.ref<!ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>>, !ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>> -> !ocaml.unit
 * CHECK:                 %[[VAL_51:.*]] = ocaml.unit
 * CHECK:                 ocaml.yield %[[VAL_52:.*]] : !ocaml.unit
 * CHECK:               }
 * CHECK:               %[[VAL_53:.*]] = ocaml.unit
 * CHECK:             }
 * CHECK:             %[[VAL_54:.*]] = ocaml.module.lookup "!" : !ocaml.closure<(!ocaml.ref<!ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>>) -> !ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>>
 * CHECK:             %[[VAL_55:.*]] = ocaml.call %[[VAL_56:.*]](%[[VAL_57:.*]]) : (!ocaml.closure<(!ocaml.ref<!ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>>) -> !ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>>) : !ocaml.ref<!ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>> -> !ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>
 * CHECK:             ocaml.yield %[[VAL_58:.*]] : !ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>
 * CHECK:           }
 * CHECK:           ocaml.yield %[[VAL_59:.*]] : !ocaml.list<!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>>
 * CHECK:         }
 * CHECK:       }

 *)
