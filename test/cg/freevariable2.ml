(*
 * RUN: g3 %s | FileCheck %s
 *)
let x = 5 in
let y () = x in
y ();;
(*
 * NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

 * The script is designed to make adding checks to
 * a test case fast, it is *not* designed to be authoritative
 * about what constitutes a good test! The CHECK should be
 * minimized and named to reflect the test intent.


 * CHECK-LABEL:   ocaml.global g$x$0 : !ocaml.box<i64>

 * CHECK-LABEL:   func.func private @y(
 * CHECK-SAME:                         %[[VAL_0:[0-9]+|[a-zA-Z$._-][a-zA-Z0-9$._-]*]]: !ocaml.unit) -> !ocaml.box<i64> {
 * CHECK:           %[[VAL_1:.*]] = ocaml.address_of @g$x$0 : !ocaml.ref<!ocaml.box<i64>>
 * CHECK:           %[[VAL_2:.*]] = ocaml.load %[[VAL_1]] : !ocaml.ref<!ocaml.box<i64>> -> !ocaml.box<i64>
 * CHECK:           return %[[VAL_2]] : !ocaml.box<i64>
 * CHECK:         }

 * CHECK-LABEL:   func.func private @main() -> i32 {
 * CHECK:           %[[VAL_0:.*]] = scf.execute_region -> !ocaml.box<i64> {
 * CHECK:             %[[VAL_1:.*]] = arith.constant 5 : i64
 * CHECK:             %[[VAL_2:.*]] = ocaml.convert %[[VAL_1]] from i64 to !ocaml.box<i64>
 * CHECK:             %[[VAL_3:.*]] = ocaml.address_of @g$x$0 : !ocaml.ref<!ocaml.box<i64>>
 * CHECK:             ocaml.store %[[VAL_2]] to %[[VAL_3]] : !ocaml.box<i64> to !ocaml.ref<!ocaml.box<i64>>
 * CHECK:             %[[VAL_4:.*]] = scf.execute_region -> !ocaml.box<i64> {
 * CHECK:               %[[VAL_5:.*]] = ocaml.unit
 * CHECK:               %[[VAL_6:.*]] = ocaml.unit
 * CHECK:               %[[VAL_7:.*]] = func.call @y(%[[VAL_6]]) : (!ocaml.unit) -> !ocaml.box<i64>
 * CHECK:               scf.yield %[[VAL_7]] : !ocaml.box<i64>
 * CHECK:             }
 * CHECK:             scf.yield %[[VAL_4]] : !ocaml.box<i64>
 * CHECK:           }
 * CHECK:           %[[VAL_8:.*]] = arith.constant 0 : i32
 * CHECK:           return %[[VAL_8]] : i32
 * CHECK:         }

 *)
