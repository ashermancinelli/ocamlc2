(*

 * CHECK:       %[[VAL_0:.*]] = ocaml.module @T4 : !ocaml.module<"T4", {}> {
 * CHECK:         %[[VAL_1:.*]] = ocaml.let "area" : !ocaml.closure<(!ocaml.variant<"shape" is "A" | "B" of !ocaml.box<i64>>) -> !ocaml.box<i64>> = {
 * CHECK:         ^bb0(%[[VAL_2:.*]]: !ocaml.variant<"shape" is "A" | "B" of !ocaml.box<i64>>):
 * CHECK:           %[[VAL_3:.*]] = ocaml.module.lookup "s" : !ocaml.variant<"shape" is "A" | "B" of !ocaml.box<i64>>
 * CHECK:           %[[VAL_4:.*]] = ocaml.block : !ocaml.box<i64> {
 * CHECK:             %[[VAL_5:.*]] = ocaml.module.lookup "B" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"shape" is "A" | "B" of !ocaml.box<i64>>>
 * CHECK:             %[[VAL_6:.*]] = ocaml.pattern_variable : !ocaml.box<i64>
 * CHECK:             %[[VAL_7:.*]] = ocaml.call %[[VAL_8:.*]](%[[VAL_9:.*]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.variant<"shape" is "A" | "B" of !ocaml.box<i64>>>) : !ocaml.box<i64> -> !ocaml.variant<"shape" is "A" | "B" of !ocaml.box<i64>>
 * CHECK:             %[[VAL_10:.*]] = ocaml.match %[[VAL_11:.*]] against %[[VAL_12:.*]] : !ocaml.variant<"shape" is "A" | "B" of !ocaml.box<i64>>
 * CHECK:             cf.cond_br %[[VAL_13:.*]], ^bb1, ^bb2
 * CHECK:           ^bb1:
 * CHECK:             %[[VAL_14:.*]] = ocaml.module.lookup "+" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>
 * CHECK:             %[[VAL_15:.*]] = arith.constant 1 : i64
 * CHECK:             %[[VAL_16:.*]] = ocaml.convert %[[VAL_17:.*]] from i64 to !ocaml.box<i64>
 * CHECK:             %[[VAL_18:.*]] = ocaml.call %[[VAL_19:.*]](%[[VAL_20:.*]], %[[VAL_21:.*]]) : (!ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>) : !ocaml.box<i64>, !ocaml.box<i64> -> !ocaml.box<i64>
 * CHECK:             cf.br ^bb5(%[[VAL_22:.*]] : !ocaml.box<i64>)
 * CHECK:           ^bb2:
 * CHECK:             %[[VAL_23:.*]] = ocaml.module.lookup "A" : !ocaml.variant<"shape" is "A" | "B" of !ocaml.box<i64>>
 * CHECK:             %[[VAL_24:.*]] = ocaml.match %[[VAL_25:.*]] against %[[VAL_26:.*]] : !ocaml.variant<"shape" is "A" | "B" of !ocaml.box<i64>>
 * CHECK:             cf.cond_br %[[VAL_27:.*]], ^bb3, ^bb4
 * CHECK:           ^bb3:
 * CHECK:             %[[VAL_28:.*]] = arith.constant 1 : i64
 * CHECK:             %[[VAL_29:.*]] = ocaml.convert %[[VAL_30:.*]] from i64 to !ocaml.box<i64>
 * CHECK:             cf.br ^bb5(%[[VAL_31:.*]] : !ocaml.box<i64>)
 * CHECK:           ^bb4:
 * CHECK:             %[[VAL_32:.*]] = arith.constant false
 * CHECK:             cf.assert %[[VAL_33:.*]], "No match found"
 * CHECK:             %[[VAL_34:.*]] = ocaml.convert %[[VAL_35:.*]] from i1 to !ocaml.box<i64>
 * CHECK:             cf.br ^bb5(%[[VAL_36:.*]] : !ocaml.box<i64>)
 * CHECK:           ^bb5(%[[VAL_37:.*]]: !ocaml.box<i64>):
 * CHECK:             ocaml.yield %[[VAL_38:.*]] : !ocaml.box<i64>
 * CHECK:           }
 * CHECK:           ocaml.yield %[[VAL_39:.*]] : !ocaml.box<i64>
 * CHECK:         }
 * CHECK:         %[[VAL_40:.*]] = ocaml.module.lookup "print_int" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>
 * CHECK:         %[[VAL_41:.*]] = ocaml.module.lookup "A" : !ocaml.variant<"shape" is "A" | "B" of !ocaml.box<i64>>
 * CHECK:         %[[VAL_42:.*]] = ocaml.call %[[VAL_43:.*]](%[[VAL_44:.*]]) : (!ocaml.closure<(!ocaml.variant<"shape" is "A" | "B" of !ocaml.box<i64>>) -> !ocaml.box<i64>>) : !ocaml.variant<"shape" is "A" | "B" of !ocaml.box<i64>> -> !ocaml.box<i64>
 * CHECK:         %[[VAL_45:.*]] = ocaml.call %[[VAL_46:.*]](%[[VAL_47:.*]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>) : !ocaml.box<i64> -> !ocaml.unit
 * CHECK:         %[[VAL_48:.*]] = ocaml.module.lookup "print_endline" : !ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>
 * CHECK:         %[[VAL_49:.*]] = ocaml.embox_string ""
 * CHECK:         %[[VAL_50:.*]] = ocaml.call %[[VAL_51:.*]](%[[VAL_52:.*]]) : (!ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>) : !ocaml.sbox -> !ocaml.unit
 * CHECK:       }

 *)
