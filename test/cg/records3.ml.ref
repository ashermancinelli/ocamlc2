(*

 * CHECK:       %[[VAL_0:.*]] = ocaml.module @Records3 : !ocaml.module<"Records3", {}> {
 * CHECK:         %[[VAL_1:.*]] = ocaml.let "t" : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>> = {
 * CHECK:           %[[VAL_2:.*]] = ocaml.undef : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>>
 * CHECK:           %[[VAL_3:.*]] = arith.constant 1 : i64
 * CHECK:           %[[VAL_4:.*]] = ocaml.convert %[[VAL_5:.*]] from i64 to !ocaml.box<i64>
 * CHECK:           %[[VAL_6:.*]] = ocaml.record.set %[[VAL_7:.*]], "x" = %[[VAL_8:.*]] : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>>, !ocaml.box<i64> -> !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>>
 * CHECK:           %[[VAL_9:.*]] = arith.constant 2 : i64
 * CHECK:           %[[VAL_10:.*]] = ocaml.convert %[[VAL_11:.*]] from i64 to !ocaml.box<i64>
 * CHECK:           %[[VAL_12:.*]] = ocaml.record.set %[[VAL_13:.*]], "y" = %[[VAL_14:.*]] : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>>, !ocaml.box<i64> -> !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>>
 * CHECK:           ocaml.yield %[[VAL_15:.*]] : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>>
 * CHECK:         }
 * CHECK:         %[[VAL_16:.*]] = ocaml.let "t2" : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>> = {
 * CHECK:           %[[VAL_17:.*]] = ocaml.undef : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>>
 * CHECK:           %[[VAL_18:.*]] = arith.constant 1 : i64
 * CHECK:           %[[VAL_19:.*]] = ocaml.convert %[[VAL_20:.*]] from i64 to !ocaml.box<i64>
 * CHECK:           %[[VAL_21:.*]] = ocaml.record.set %[[VAL_22:.*]], "x" = %[[VAL_23:.*]] : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>>, !ocaml.box<i64> -> !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>>
 * CHECK:           %[[VAL_24:.*]] = arith.constant 2 : i64
 * CHECK:           %[[VAL_25:.*]] = ocaml.convert %[[VAL_26:.*]] from i64 to !ocaml.box<i64>
 * CHECK:           %[[VAL_27:.*]] = ocaml.record.set %[[VAL_28:.*]], "y" = %[[VAL_29:.*]] : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>>, !ocaml.box<i64> -> !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>>
 * CHECK:           %[[VAL_30:.*]] = arith.constant 3 : i64
 * CHECK:           %[[VAL_31:.*]] = ocaml.convert %[[VAL_32:.*]] from i64 to !ocaml.box<i64>
 * CHECK:           %[[VAL_33:.*]] = ocaml.record.set %[[VAL_34:.*]], "z" = %[[VAL_35:.*]] : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>>, !ocaml.box<i64> -> !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>>
 * CHECK:           ocaml.yield %[[VAL_36:.*]] : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>>
 * CHECK:         }
 * CHECK:         %[[VAL_37:.*]] = ocaml.let "t3" : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>> = {
 * CHECK:           %[[VAL_38:.*]] = ocaml.undef : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>>
 * CHECK:           %[[VAL_39:.*]] = arith.constant 1 : i64
 * CHECK:           %[[VAL_40:.*]] = ocaml.convert %[[VAL_41:.*]] from i64 to !ocaml.box<i64>
 * CHECK:           %[[VAL_42:.*]] = ocaml.record.set %[[VAL_43:.*]], "x" = %[[VAL_44:.*]] : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>>, !ocaml.box<i64> -> !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>>
 * CHECK:           %[[VAL_45:.*]] = arith.constant 2 : i64
 * CHECK:           %[[VAL_46:.*]] = ocaml.convert %[[VAL_47:.*]] from i64 to !ocaml.box<i64>
 * CHECK:           %[[VAL_48:.*]] = ocaml.record.set %[[VAL_49:.*]], "y" = %[[VAL_50:.*]] : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>>, !ocaml.box<i64> -> !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>>
 * CHECK:           %[[VAL_51:.*]] = arith.constant 3 : i64
 * CHECK:           %[[VAL_52:.*]] = ocaml.convert %[[VAL_53:.*]] from i64 to !ocaml.box<i64>
 * CHECK:           %[[VAL_54:.*]] = ocaml.record.set %[[VAL_55:.*]], "z" = %[[VAL_56:.*]] : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>>, !ocaml.box<i64> -> !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>>
 * CHECK:           ocaml.yield %[[VAL_57:.*]] : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>>
 * CHECK:         }
 * CHECK:         %[[VAL_58:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:           %[[VAL_59:.*]] = ocaml.module.lookup "@@" : !ocaml.closure<(!ocaml.closure<(!ocaml.unit) -> !ocaml.unit>, !ocaml.unit) -> !ocaml.unit>
 * CHECK:           %[[VAL_60:.*]] = ocaml.module.lookup "print_newline" : !ocaml.closure<(!ocaml.unit) -> !ocaml.unit>
 * CHECK:           %[[VAL_61:.*]] = ocaml.module.lookup "print_int" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>
 * CHECK:           %[[VAL_62:.*]] = ocaml.record.get %[[VAL_63:.*]], "x" : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>> -> !ocaml.box<i64>
 * CHECK:           %[[VAL_64:.*]] = ocaml.call %[[VAL_65:.*]](%[[VAL_66:.*]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>) : !ocaml.box<i64> -> !ocaml.unit
 * CHECK:           %[[VAL_67:.*]] = ocaml.call %[[VAL_68:.*]](%[[VAL_69:.*]], %[[VAL_70:.*]]) : (!ocaml.closure<(!ocaml.closure<(!ocaml.unit) -> !ocaml.unit>, !ocaml.unit) -> !ocaml.unit>) : !ocaml.closure<(!ocaml.unit) -> !ocaml.unit>, !ocaml.unit -> !ocaml.unit
 * CHECK:           %[[VAL_71:.*]] = ocaml.unit
 * CHECK:           ocaml.yield %[[VAL_72:.*]] : !ocaml.unit
 * CHECK:         }
 * CHECK:         %[[VAL_73:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:           %[[VAL_74:.*]] = ocaml.module.lookup "@@" : !ocaml.closure<(!ocaml.closure<(!ocaml.unit) -> !ocaml.unit>, !ocaml.unit) -> !ocaml.unit>
 * CHECK:           %[[VAL_75:.*]] = ocaml.module.lookup "print_newline" : !ocaml.closure<(!ocaml.unit) -> !ocaml.unit>
 * CHECK:           %[[VAL_76:.*]] = ocaml.module.lookup "print_int" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>
 * CHECK:           %[[VAL_77:.*]] = ocaml.record.get %[[VAL_78:.*]], "x" : !ocaml.record<"ocaml.record", {"x" : !ocaml.box<i64>, "y" : !ocaml.box<i64>, "z" : !ocaml.box<i64>> -> !ocaml.box<i64>
 * CHECK:           %[[VAL_79:.*]] = ocaml.call %[[VAL_80:.*]](%[[VAL_81:.*]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>) : !ocaml.box<i64> -> !ocaml.unit
 * CHECK:           %[[VAL_82:.*]] = ocaml.call %[[VAL_83:.*]](%[[VAL_84:.*]], %[[VAL_85:.*]]) : (!ocaml.closure<(!ocaml.closure<(!ocaml.unit) -> !ocaml.unit>, !ocaml.unit) -> !ocaml.unit>) : !ocaml.closure<(!ocaml.unit) -> !ocaml.unit>, !ocaml.unit -> !ocaml.unit
 * CHECK:           %[[VAL_86:.*]] = ocaml.unit
 * CHECK:           ocaml.yield %[[VAL_87:.*]] : !ocaml.unit
 * CHECK:         }
 * CHECK:       }

 *)
