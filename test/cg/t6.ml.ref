(*

 * CHECK:       %[[VAL_0:.*]] = ocaml.module @T6 : !ocaml.module<"T6", {}> {
 * CHECK:         %[[VAL_1:.*]] = ocaml.let "mean" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>> = {
 * CHECK:         ^bb0(%[[VAL_2:.*]]: !ocaml.box<i64>, %[[VAL_3:.*]]: !ocaml.box<i64>):
 * CHECK:           %[[VAL_4:.*]] = ocaml.module.lookup "/" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>
 * CHECK:           %[[VAL_5:.*]] = ocaml.module.lookup "+" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>
 * CHECK:           %[[VAL_6:.*]] = ocaml.module.lookup "s" : !ocaml.box<i64>
 * CHECK:           %[[VAL_7:.*]] = ocaml.module.lookup "r" : !ocaml.box<i64>
 * CHECK:           %[[VAL_8:.*]] = ocaml.call %[[VAL_9:.*]](%[[VAL_10:.*]], %[[VAL_11:.*]]) : (!ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>) : !ocaml.box<i64>, !ocaml.box<i64> -> !ocaml.box<i64>
 * CHECK:           %[[VAL_12:.*]] = arith.constant 2 : i64
 * CHECK:           %[[VAL_13:.*]] = ocaml.convert %[[VAL_14:.*]] from i64 to !ocaml.box<i64>
 * CHECK:           %[[VAL_15:.*]] = ocaml.call %[[VAL_16:.*]](%[[VAL_17:.*]], %[[VAL_18:.*]]) : (!ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>) : !ocaml.box<i64>, !ocaml.box<i64> -> !ocaml.box<i64>
 * CHECK:           ocaml.yield %[[VAL_19:.*]] : !ocaml.box<i64>
 * CHECK:         }
 * CHECK:         %[[VAL_20:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:           %[[VAL_21:.*]] = ocaml.let "x" : !ocaml.box<i64> = {
 * CHECK:             %[[VAL_22:.*]] = arith.constant 5 : i64
 * CHECK:             %[[VAL_23:.*]] = ocaml.convert %[[VAL_24:.*]] from i64 to !ocaml.box<i64>
 * CHECK:             ocaml.yield %[[VAL_25:.*]] : !ocaml.box<i64>
 * CHECK:           }
 * CHECK:           %[[VAL_26:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:             %[[VAL_27:.*]] = ocaml.let "y" : !ocaml.box<i64> = {
 * CHECK:               %[[VAL_28:.*]] = arith.constant 10 : i64
 * CHECK:               %[[VAL_29:.*]] = ocaml.convert %[[VAL_30:.*]] from i64 to !ocaml.box<i64>
 * CHECK:               ocaml.yield %[[VAL_31:.*]] : !ocaml.box<i64>
 * CHECK:             }
 * CHECK:             %[[VAL_32:.*]] = ocaml.module.lookup "print_int" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>
 * CHECK:             %[[VAL_33:.*]] = ocaml.call %[[VAL_34:.*]](%[[VAL_35:.*]], %[[VAL_36:.*]]) : (!ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>) : !ocaml.box<i64>, !ocaml.box<i64> -> !ocaml.box<i64>
 * CHECK:             %[[VAL_37:.*]] = ocaml.call %[[VAL_38:.*]](%[[VAL_39:.*]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>) : !ocaml.box<i64> -> !ocaml.unit
 * CHECK:             %[[VAL_40:.*]] = ocaml.unit
 * CHECK:             ocaml.yield %[[VAL_41:.*]] : !ocaml.unit
 * CHECK:           }
 * CHECK:           %[[VAL_42:.*]] = ocaml.unit
 * CHECK:           ocaml.yield %[[VAL_43:.*]] : !ocaml.unit
 * CHECK:         }
 * CHECK:       }

 *)
