(*

 * CHECK:       %[[VAL_0:.*]] = ocaml.module @Freevariable2 : !ocaml.module<"Freevariable2", {}> {
 * CHECK:         %[[VAL_1:.*]] = ocaml.block : !ocaml.box<i64> {
 * CHECK:           %[[VAL_2:.*]] = ocaml.let "x" : !ocaml.box<i64> = {
 * CHECK:             %[[VAL_3:.*]] = arith.constant 5 : i64
 * CHECK:             %[[VAL_4:.*]] = ocaml.convert %[[VAL_5:.*]] from i64 to !ocaml.box<i64>
 * CHECK:             ocaml.yield %[[VAL_6:.*]] : !ocaml.box<i64>
 * CHECK:           }
 * CHECK:           %[[VAL_7:.*]] = ocaml.block : !ocaml.box<i64> {
 * CHECK:             %[[VAL_8:.*]] = ocaml.let "y" : !ocaml.box<i64> = {
 * CHECK:               %[[VAL_9:.*]] = arith.constant 7 : i64
 * CHECK:               %[[VAL_10:.*]] = ocaml.convert %[[VAL_11:.*]] from i64 to !ocaml.box<i64>
 * CHECK:               ocaml.yield %[[VAL_12:.*]] : !ocaml.box<i64>
 * CHECK:             }
 * CHECK:             %[[VAL_13:.*]] = ocaml.block : !ocaml.box<i64> {
 * CHECK:               %[[VAL_14:.*]] = ocaml.let "z" : !ocaml.closure<(!ocaml.unit) -> !ocaml.box<i64>> = {
 * CHECK:               ^bb0(%[[VAL_15:.*]]: !ocaml.unit):
 * CHECK:                 %[[VAL_16:.*]] = ocaml.module.lookup "+" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>
 * CHECK:                 %[[VAL_17:.*]] = ocaml.call %[[VAL_18:.*]](%[[VAL_19:.*]], %[[VAL_20:.*]]) : (!ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>) : !ocaml.box<i64>, !ocaml.box<i64> -> !ocaml.box<i64>
 * CHECK:                 ocaml.yield %[[VAL_21:.*]] : !ocaml.box<i64>
 * CHECK:               }
 * CHECK:               %[[VAL_22:.*]] = ocaml.unit
 * CHECK:               %[[VAL_23:.*]] = ocaml.call %[[VAL_24:.*]](%[[VAL_25:.*]]) : (!ocaml.closure<(!ocaml.unit) -> !ocaml.box<i64>>) : !ocaml.unit -> !ocaml.box<i64>
 * CHECK:               ocaml.yield %[[VAL_26:.*]] : !ocaml.box<i64>
 * CHECK:             }
 * CHECK:             ocaml.yield %[[VAL_27:.*]] : !ocaml.box<i64>
 * CHECK:           }
 * CHECK:           ocaml.yield %[[VAL_28:.*]] : !ocaml.box<i64>
 * CHECK:         }
 * CHECK:       }

 *)
