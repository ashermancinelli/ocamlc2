(*

 * CHECK:       %[[VAL_0:.*]] = ocaml.module @T10 : !ocaml.module<"T10", {}> {
 * CHECK:         %[[VAL_1:.*]] = ocaml.let "test" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.sbox> = {
 * CHECK:         ^bb0(%[[VAL_2:.*]]: !ocaml.box<i64>):
 * CHECK:           %[[VAL_3:.*]] = ocaml.module.lookup ">" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i1>>
 * CHECK:           %[[VAL_4:.*]] = arith.constant 10 : i64
 * CHECK:           %[[VAL_5:.*]] = ocaml.convert %[[VAL_6:.*]] from i64 to !ocaml.box<i64>
 * CHECK:           %[[VAL_7:.*]] = ocaml.call %[[VAL_8:.*]](%[[VAL_9:.*]], %[[VAL_10:.*]]) : (!ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i1>>) : !ocaml.box<i64>, !ocaml.box<i64> -> !ocaml.box<i1>
 * CHECK:           %[[VAL_11:.*]] = ocaml.convert %[[VAL_12:.*]] from !ocaml.box<i1> to i1
 * CHECK:           %[[VAL_13:.*]] = scf.if %[[VAL_14:.*]] -> (!ocaml.sbox) {
 * CHECK:             %[[VAL_15:.*]] = ocaml.embox_string "large"
 * CHECK:             scf.yield %[[VAL_16:.*]] : !ocaml.sbox
 * CHECK:           } else {
 * CHECK:             %[[VAL_17:.*]] = ocaml.module.lookup ">" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i1>>
 * CHECK:             %[[VAL_18:.*]] = arith.constant 5 : i64
 * CHECK:             %[[VAL_19:.*]] = ocaml.convert %[[VAL_20:.*]] from i64 to !ocaml.box<i64>
 * CHECK:             %[[VAL_21:.*]] = ocaml.call %[[VAL_22:.*]](%[[VAL_23:.*]], %[[VAL_24:.*]]) : (!ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i1>>) : !ocaml.box<i64>, !ocaml.box<i64> -> !ocaml.box<i1>
 * CHECK:             %[[VAL_25:.*]] = ocaml.convert %[[VAL_26:.*]] from !ocaml.box<i1> to i1
 * CHECK:             %[[VAL_27:.*]] = scf.if %[[VAL_28:.*]] -> (!ocaml.sbox) {
 * CHECK:               %[[VAL_29:.*]] = ocaml.embox_string "medium"
 * CHECK:               scf.yield %[[VAL_30:.*]] : !ocaml.sbox
 * CHECK:             } else {
 * CHECK:               %[[VAL_31:.*]] = ocaml.module.lookup ">" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i1>>
 * CHECK:               %[[VAL_32:.*]] = arith.constant 0 : i64
 * CHECK:               %[[VAL_33:.*]] = ocaml.convert %[[VAL_34:.*]] from i64 to !ocaml.box<i64>
 * CHECK:               %[[VAL_35:.*]] = ocaml.call %[[VAL_36:.*]](%[[VAL_37:.*]], %[[VAL_38:.*]]) : (!ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i1>>) : !ocaml.box<i64>, !ocaml.box<i64> -> !ocaml.box<i1>
 * CHECK:               %[[VAL_39:.*]] = ocaml.convert %[[VAL_40:.*]] from !ocaml.box<i1> to i1
 * CHECK:               %[[VAL_41:.*]] = scf.if %[[VAL_42:.*]] -> (!ocaml.sbox) {
 * CHECK:                 %[[VAL_43:.*]] = ocaml.embox_string "small"
 * CHECK:                 scf.yield %[[VAL_44:.*]] : !ocaml.sbox
 * CHECK:               } else {
 * CHECK:                 %[[VAL_45:.*]] = ocaml.embox_string "negative or zero"
 * CHECK:                 scf.yield %[[VAL_46:.*]] : !ocaml.sbox
 * CHECK:               }
 * CHECK:               scf.yield %[[VAL_47:.*]] : !ocaml.sbox
 * CHECK:             }
 * CHECK:             scf.yield %[[VAL_48:.*]] : !ocaml.sbox
 * CHECK:           }
 * CHECK:           ocaml.yield %[[VAL_49:.*]] : !ocaml.sbox
 * CHECK:         }
 * CHECK:         %[[VAL_50:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:           %[[VAL_51:.*]] = ocaml.module.lookup "print_string" : !ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>
 * CHECK:           %[[VAL_52:.*]] = arith.constant 7 : i64
 * CHECK:           %[[VAL_53:.*]] = ocaml.convert %[[VAL_54:.*]] from i64 to !ocaml.box<i64>
 * CHECK:           %[[VAL_55:.*]] = ocaml.call %[[VAL_56:.*]](%[[VAL_57:.*]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.sbox>) : !ocaml.box<i64> -> !ocaml.sbox
 * CHECK:           %[[VAL_58:.*]] = ocaml.call %[[VAL_59:.*]](%[[VAL_60:.*]]) : (!ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>) : !ocaml.sbox -> !ocaml.unit
 * CHECK:           %[[VAL_61:.*]] = ocaml.unit
 * CHECK:           ocaml.yield %[[VAL_62:.*]] : !ocaml.unit
 * CHECK:         }
 * CHECK:       }

 *)
