(*
 * NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

 * The script is designed to make adding checks to
 * a test case fast, it is *not* designed to be authoritative
 * about what constitutes a good test! The CHECK should be
 * minimized and named to reflect the test intent.


 * CHECK-LABEL:   func.func private @print_int(!ocaml.box<i64>) -> !ocaml.unit attributes {ocaml.unresolved}

 * CHECK-LABEL:   func.func private @f(
 * CHECK-SAME:                         %[[VAL_0:[0-9]+|[a-zA-Z$._-][a-zA-Z0-9$._-]*]]: !ocaml.box<i64>,
 * CHECK-SAME:                         %[[VAL_1:[0-9]+|[a-zA-Z$._-][a-zA-Z0-9$._-]*]]: !ocaml.box<i64>) -> !ocaml.unit attributes {ocaml.env = "fenv$0"} {
 * CHECK:           %[[VAL_2:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:             %[[VAL_3:.*]] = ocaml.block : !ocaml.box<i64> {
 * CHECK:               ocaml.yield %[[VAL_0]] : !ocaml.box<i64>
 * CHECK:             }
 * CHECK:             %[[VAL_4:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:               %[[VAL_5:.*]] = ocaml.block : !ocaml.box<i64> {
 * CHECK:                 ocaml.yield %[[VAL_1]] : !ocaml.box<i64>
 * CHECK:               }
 * CHECK:               %[[VAL_6:.*]] = ocaml.convert %[[VAL_3]] from !ocaml.box<i64> to i64
 * CHECK:               %[[VAL_7:.*]] = ocaml.convert %[[VAL_5]] from !ocaml.box<i64> to i64
 * CHECK:               %[[VAL_8:.*]] = arith.constant 1 : i64
 * CHECK:               scf.for %[[VAL_9:.*]] = %[[VAL_6]] to %[[VAL_7]] step %[[VAL_8]]  : i64 {
 * CHECK:                 %[[VAL_10:.*]] = ocaml.convert %[[VAL_9]] from i64 to !ocaml.box<i64>
 * CHECK:                 %[[VAL_11:.*]] = ocaml.closure.new @print_int : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>
 * CHECK:                 %[[VAL_12:.*]] = ocaml.call %[[VAL_11]](%[[VAL_10]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>) : !ocaml.box<i64> -> !ocaml.unit
 * CHECK:                 %[[VAL_13:.*]] = ocaml.unit
 * CHECK:               }
 * CHECK:               %[[VAL_14:.*]] = ocaml.unit
 * CHECK:               ocaml.yield %[[VAL_14]] : !ocaml.unit
 * CHECK:             }
 * CHECK:             %[[VAL_15:.*]] = ocaml.unit
 * CHECK:             ocaml.yield %[[VAL_15]] : !ocaml.unit
 * CHECK:           }
 * CHECK:           return %[[VAL_2]] : !ocaml.unit
 * CHECK:         }

 * CHECK-LABEL:   ocaml.program : {
 * CHECK:           %[[VAL_0:.*]] = ocaml.closure.env.new {ocaml.env_for_function = "fenv$0"} : !ocaml.env
 * CHECK:           %[[VAL_1:.*]] = ocaml.closure.new @f capturing %[[VAL_0]] : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.unit>
 * CHECK:         }

 *)
