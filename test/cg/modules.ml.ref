(*

 * CHECK:       %[[VAL_0:.*]] = ocaml.module @Modules : !ocaml.module<"Modules", {}> {
 * CHECK:         %[[VAL_1:.*]] = ocaml.module @M2 : !ocaml.module<"M2", {}> {
 * CHECK:           %[[VAL_2:.*]] = ocaml.let "message" : !ocaml.sbox = {
 * CHECK:             %[[VAL_3:.*]] = ocaml.embox_string "Hello from M2"
 * CHECK:             ocaml.yield %[[VAL_4:.*]] : !ocaml.sbox
 * CHECK:           }
 * CHECK:           %[[VAL_5:.*]] = ocaml.let "print" : !ocaml.closure<(!ocaml.unit) -> !ocaml.unit> = {
 * CHECK:           ^bb0(%[[VAL_6:.*]]: !ocaml.unit):
 * CHECK:             %[[VAL_7:.*]] = ocaml.module.lookup "print_endline" : !ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>
 * CHECK:             %[[VAL_8:.*]] = ocaml.call %[[VAL_9:.*]](%[[VAL_10:.*]]) : (!ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>) : !ocaml.sbox -> !ocaml.unit
 * CHECK:             ocaml.yield %[[VAL_11:.*]] : !ocaml.unit
 * CHECK:           }
 * CHECK:           %[[VAL_12:.*]] = ocaml.let "map" : !ocaml.closure<(!ocaml.closure<(!ocaml.obox) -> !ocaml.obox>, !ocaml.list<!ocaml.obox>) -> !ocaml.list<!ocaml.obox>> = {
 * CHECK:           ^bb0(%[[VAL_13:.*]]: !ocaml.closure<(!ocaml.obox) -> !ocaml.obox>, %[[VAL_14:.*]]: !ocaml.list<!ocaml.obox>):
 * CHECK:             %[[VAL_15:.*]] = ocaml.module.lookup "List.map" : !ocaml.closure<(!ocaml.closure<(!ocaml.obox) -> !ocaml.obox>, !ocaml.list<!ocaml.obox>) -> !ocaml.list<!ocaml.obox>>
 * CHECK:             %[[VAL_16:.*]] = ocaml.call %[[VAL_17:.*]](%[[VAL_18:.*]], %[[VAL_19:.*]]) : (!ocaml.closure<(!ocaml.closure<(!ocaml.obox) -> !ocaml.obox>, !ocaml.list<!ocaml.obox>) -> !ocaml.list<!ocaml.obox>>) : !ocaml.closure<(!ocaml.obox) -> !ocaml.obox>, !ocaml.list<!ocaml.obox> -> !ocaml.list<!ocaml.obox>
 * CHECK:             ocaml.yield %[[VAL_20:.*]] : !ocaml.list<!ocaml.obox>
 * CHECK:           }
 * CHECK:         }
 * CHECK:         %[[VAL_21:.*]] = ocaml.let "()" : !ocaml.unit = {
 * CHECK:           %[[VAL_22:.*]] = ocaml.module.lookup "M2.print" : !ocaml.closure<(!ocaml.unit) -> !ocaml.unit>
 * CHECK:           %[[VAL_23:.*]] = ocaml.unit
 * CHECK:           %[[VAL_24:.*]] = ocaml.call %[[VAL_25:.*]](%[[VAL_26:.*]]) : (!ocaml.closure<(!ocaml.unit) -> !ocaml.unit>) : !ocaml.unit -> !ocaml.unit
 * CHECK:           %[[VAL_27:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:             %[[VAL_28:.*]] = ocaml.let "l" : !ocaml.list<!ocaml.box<i64>> = {
 * CHECK:               %[[VAL_29:.*]] = ocaml.undef : !ocaml.list<!ocaml.box<i64>>
 * CHECK:               %[[VAL_30:.*]] = arith.constant 1 : i64
 * CHECK:               %[[VAL_31:.*]] = ocaml.convert %[[VAL_32:.*]] from i64 to !ocaml.box<i64>
 * CHECK:               %[[VAL_33:.*]] = ocaml.list.append %[[VAL_34:.*]], %[[VAL_35:.*]] : !ocaml.list<!ocaml.box<i64>>, !ocaml.box<i64> -> !ocaml.list<!ocaml.box<i64>>
 * CHECK:               %[[VAL_36:.*]] = arith.constant 2 : i64
 * CHECK:               %[[VAL_37:.*]] = ocaml.convert %[[VAL_38:.*]] from i64 to !ocaml.box<i64>
 * CHECK:               %[[VAL_39:.*]] = ocaml.list.append %[[VAL_40:.*]], %[[VAL_41:.*]] : !ocaml.list<!ocaml.box<i64>>, !ocaml.box<i64> -> !ocaml.list<!ocaml.box<i64>>
 * CHECK:               %[[VAL_42:.*]] = arith.constant 3 : i64
 * CHECK:               %[[VAL_43:.*]] = ocaml.convert %[[VAL_44:.*]] from i64 to !ocaml.box<i64>
 * CHECK:               %[[VAL_45:.*]] = ocaml.list.append %[[VAL_46:.*]], %[[VAL_47:.*]] : !ocaml.list<!ocaml.box<i64>>, !ocaml.box<i64> -> !ocaml.list<!ocaml.box<i64>>
 * CHECK:               ocaml.yield %[[VAL_48:.*]] : !ocaml.list<!ocaml.box<i64>>
 * CHECK:             }
 * CHECK:             %[[VAL_49:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:               %[[VAL_50:.*]] = ocaml.let "l'" : !ocaml.list<!ocaml.box<i64>> = {
 * CHECK:                 %[[VAL_51:.*]] = ocaml.module.lookup "M2.map" : !ocaml.closure<(!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>, !ocaml.list<!ocaml.box<i64>>) -> !ocaml.list<!ocaml.box<i64>>>
 * CHECK:                 %[[VAL_52:.*]] = ocaml.let "funexpr$0" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>> = {
 * CHECK:                 ^bb0(%[[VAL_53:.*]]: !ocaml.box<i64>):
 * CHECK:                   %[[VAL_54:.*]] = ocaml.module.lookup "*" : !ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>
 * CHECK:                   %[[VAL_55:.*]] = arith.constant 2 : i64
 * CHECK:                   %[[VAL_56:.*]] = ocaml.convert %[[VAL_57:.*]] from i64 to !ocaml.box<i64>
 * CHECK:                   %[[VAL_58:.*]] = ocaml.call %[[VAL_59:.*]](%[[VAL_60:.*]], %[[VAL_61:.*]]) : (!ocaml.closure<(!ocaml.box<i64>, !ocaml.box<i64>) -> !ocaml.box<i64>>) : !ocaml.box<i64>, !ocaml.box<i64> -> !ocaml.box<i64>
 * CHECK:                   ocaml.yield %[[VAL_62:.*]] : !ocaml.box<i64>
 * CHECK:                 }
 * CHECK:                 %[[VAL_63:.*]] = ocaml.call %[[VAL_64:.*]](%[[VAL_65:.*]], %[[VAL_66:.*]]) : (!ocaml.closure<(!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>, !ocaml.list<!ocaml.box<i64>>) -> !ocaml.list<!ocaml.box<i64>>>) : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.box<i64>>, !ocaml.list<!ocaml.box<i64>> -> !ocaml.list<!ocaml.box<i64>>
 * CHECK:                 ocaml.yield %[[VAL_67:.*]] : !ocaml.list<!ocaml.box<i64>>
 * CHECK:               }
 * CHECK:               %[[VAL_68:.*]] = ocaml.block : !ocaml.unit {
 * CHECK:                 %[[VAL_69:.*]] = ocaml.let "f" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit> = {
 * CHECK:                 ^bb0(%[[VAL_70:.*]]: !ocaml.box<i64>):
 * CHECK:                   %[[VAL_71:.*]] = ocaml.module.lookup "@@" : !ocaml.closure<(!ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>, !ocaml.sbox) -> !ocaml.unit>
 * CHECK:                   %[[VAL_72:.*]] = ocaml.module.lookup "print_endline" : !ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>
 * CHECK:                   %[[VAL_73:.*]] = ocaml.module.lookup "string_of_int" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.sbox>
 * CHECK:                   %[[VAL_74:.*]] = ocaml.call %[[VAL_75:.*]](%[[VAL_76:.*]]) : (!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.sbox>) : !ocaml.box<i64> -> !ocaml.sbox
 * CHECK:                   %[[VAL_77:.*]] = ocaml.call %[[VAL_78:.*]](%[[VAL_79:.*]], %[[VAL_80:.*]]) : (!ocaml.closure<(!ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>, !ocaml.sbox) -> !ocaml.unit>) : !ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>, !ocaml.sbox -> !ocaml.unit
 * CHECK:                   ocaml.yield %[[VAL_81:.*]] : !ocaml.unit
 * CHECK:                 }
 * CHECK:                 %[[VAL_82:.*]] = ocaml.module.lookup "List.iter" : !ocaml.closure<(!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>, !ocaml.list<!ocaml.box<i64>>) -> !ocaml.unit>
 * CHECK:                 %[[VAL_83:.*]] = ocaml.call %[[VAL_84:.*]](%[[VAL_85:.*]], %[[VAL_86:.*]]) : (!ocaml.closure<(!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>, !ocaml.list<!ocaml.box<i64>>) -> !ocaml.unit>) : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>, !ocaml.list<!ocaml.box<i64>> -> !ocaml.unit
 * CHECK:                 %[[VAL_87:.*]] = ocaml.module.lookup "List.iter" : !ocaml.closure<(!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>, !ocaml.list<!ocaml.box<i64>>) -> !ocaml.unit>
 * CHECK:                 %[[VAL_88:.*]] = ocaml.let "funexpr$1" : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit> = {
 * CHECK:                 ^bb0(%[[VAL_89:.*]]: !ocaml.box<i64>):
 * CHECK:                   %[[VAL_90:.*]] = ocaml.module.lookup "print_endline" : !ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>
 * CHECK:                   %[[VAL_91:.*]] = ocaml.embox_string "---"
 * CHECK:                   %[[VAL_92:.*]] = ocaml.call %[[VAL_93:.*]](%[[VAL_94:.*]]) : (!ocaml.closure<(!ocaml.sbox) -> !ocaml.unit>) : !ocaml.sbox -> !ocaml.unit
 * CHECK:                   ocaml.yield %[[VAL_95:.*]] : !ocaml.unit
 * CHECK:                 }
 * CHECK:                 %[[VAL_96:.*]] = ocaml.call %[[VAL_97:.*]](%[[VAL_98:.*]], %[[VAL_99:.*]]) : (!ocaml.closure<(!ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>, !ocaml.list<!ocaml.box<i64>>) -> !ocaml.unit>) : !ocaml.closure<(!ocaml.box<i64>) -> !ocaml.unit>, !ocaml.list<!ocaml.box<i64>> -> !ocaml.unit
 * CHECK:                 %[[VAL_100:.*]] = ocaml.unit
 * CHECK:                 ocaml.yield %[[VAL_101:.*]] : !ocaml.unit
 * CHECK:               }
 * CHECK:               %[[VAL_102:.*]] = ocaml.unit
 * CHECK:               ocaml.yield %[[VAL_103:.*]] : !ocaml.unit
 * CHECK:             }
 * CHECK:             %[[VAL_104:.*]] = ocaml.unit
 * CHECK:             ocaml.yield %[[VAL_105:.*]] : !ocaml.unit
 * CHECK:           }
 * CHECK:           ocaml.yield %[[VAL_106:.*]] : !ocaml.unit
 * CHECK:         }
 * CHECK:       }

 *)
