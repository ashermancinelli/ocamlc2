(*
Auto-generated by genchecks.py
CHECK: type '[[T1:.+]] t = '[[T1]] array
CHECK: val length : ('[[T1:.+]] array -> int)
CHECK: val get : ('[[T1:.+]] array -> int -> '[[T1]])
CHECK: val set : ('[[T1:.+]] array -> int -> '[[T1]] -> unit)
CHECK: val make : (int -> '[[T1:.+]] -> '[[T1]] array)
CHECK: val create_float : (int -> float array)
CHECK: val init : (int -> (int -> '[[T1:.+]]) -> '[[T1]] array)
CHECK: val make_matrix : (int -> int -> '[[T1:.+]] -> '[[T1]] array array)
CHECK: val init_matrix : (int -> int -> (int -> int -> '[[T1:.+]]) -> '[[T1]] array array)
CHECK: val append : ('[[T1:.+]] array -> '[[T1]] array -> '[[T1]] array)
CHECK: val concat : ('[[T1:.+]] array list -> '[[T1]] array)
CHECK: val sub : ('[[T1:.+]] array -> int -> int -> '[[T1]] array)
CHECK: val copy : ('[[T1:.+]] array -> '[[T1]] array)
CHECK: val fill : ('[[T1:.+]] array -> int -> int -> '[[T1]] -> unit)
CHECK: val blit : ('[[T1:.+]] array -> int -> '[[T1]] array -> int -> int -> unit)
CHECK: val to_list : ('[[T1:.+]] array -> '[[T1]] list)
CHECK: val of_list : ('[[T1:.+]] list -> '[[T1]] array)
CHECK: val equal : (('[[T1:.+]] -> '[[T1]] -> bool) -> '[[T1]] array -> '[[T1]] array -> bool)
CHECK: val compare : (('[[T1:.+]] -> '[[T1]] -> int) -> '[[T1]] array -> '[[T1]] array -> int)
CHECK: val iter : (('[[T1:.+]] -> unit) -> '[[T1]] array -> unit)
CHECK: val iteri : ((int -> '[[T1:.+]] -> unit) -> '[[T1]] array -> unit)
CHECK: val map : (('[[T2:.+]] -> '[[T1:.+]]) -> '[[T2]] array -> '[[T1]] array)
CHECK: val map_inplace : (('[[T1:.+]] -> '[[T1]]) -> '[[T1]] array -> unit)
CHECK: val mapi : ((int -> '[[T2:.+]] -> '[[T1:.+]]) -> '[[T2]] array -> '[[T1]] array)
CHECK: val mapi_inplace : ((int -> '[[T1:.+]] -> '[[T1]]) -> '[[T1]] array -> unit)
CHECK: val fold_left : (('[[T1:.+]] -> '[[T2:.+]] -> '[[T1]]) -> '[[T1]] -> '[[T2]] array -> '[[T1]])
CHECK: val fold_left_map : (('[[T1:.+]] -> '[[T2:.+]] -> '[[T1]] * '[[T3:.+]]) -> '[[T1]] -> '[[T2]] array -> '[[T1]] * '[[T3]] array)
CHECK: val fold_right : (('[[T1:.+]] -> '[[T2:.+]] -> '[[T2]]) -> '[[T1]] array -> '[[T2]] -> '[[T2]])
CHECK: val iter2 : (('[[T2:.+]] -> '[[T1:.+]] -> unit) -> '[[T2]] array -> '[[T1]] array -> unit)
CHECK: val iter2 : (('[[T2:.+]] -> '[[T1:.+]] -> unit) -> '[[T2]] array -> '[[T1]] array -> unit)
CHECK: val map2 : (('[[T3:.+]] -> '[[T1:.+]] -> '[[T2:.+]]) -> '[[T3]] array -> '[[T1]] array -> '[[T2]] array)
CHECK: val for_all : (('[[T1:.+]] -> bool) -> '[[T1]] array -> bool)
CHECK: val exists : (('[[T1:.+]] -> bool) -> '[[T1]] array -> bool)
CHECK: val for_all2 : (('[[T1:.+]] -> '[[T2:.+]] -> bool) -> '[[T1]] array -> '[[T2]] array -> bool)
CHECK: val exists2 : (('[[T2:.+]] -> '[[T1:.+]] -> bool) -> '[[T2]] array -> '[[T1]] array -> bool)
CHECK: val mem : ('[[T1:.+]] -> '[[T1]] array -> bool)
CHECK: val memq : ('[[T1:.+]] -> '[[T1]] array -> bool)
CHECK: val find_opt : (('[[T1:.+]] -> bool) -> '[[T1]] array -> '[[T1]] option)
CHECK: val find_index : (('[[T1:.+]] -> bool) -> '[[T1]] array -> int option)
CHECK: val find_map : (('[[T1:.+]] -> '[[T2:.+]] option) -> '[[T1]] array -> '[[T2]] option)
CHECK: val find_mapi : ((int -> '[[T2:.+]] -> '[[T1:.+]] option) -> '[[T2]] array -> '[[T1]] option)
CHECK: val split : ('[[T1:.+]] * '[[T2:.+]] array -> '[[T1]] array * '[[T2]] array)
CHECK: val combine : ('[[T2:.+]] array -> '[[T1:.+]] array -> '[[T2]] * '[[T1]] array)
CHECK: val sort : (('[[T1:.+]] -> '[[T1]] -> int) -> '[[T1]] array -> unit)
CHECK: val stable_sort : (('[[T1:.+]] -> '[[T1]] -> int) -> '[[T1]] array -> unit)
CHECK: val fast_sort : (('[[T1:.+]] -> '[[T1]] -> int) -> '[[T1]] array -> unit)
*)
