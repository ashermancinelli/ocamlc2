#!/usr/bin/env python3

import re
import sys
from datetime import datetime

def generate_filecheck_pattern(input_str):
    """
    Converts OCaml type signatures with specific type variables into FileCheck patterns.
    
    For example:
    "val: split : (λ (array (* 't474 't467)) (* (array 't474) (array 't467)))"
    ->
    "CHECK: val: split : (λ (array (* '[[T1:.+]] '[[T2:.+]])) (* (array '[[T1]]) (array '[[T2]])))"
    
    Only the first occurrence of each type variable includes the capture pattern (:.+).
    All subsequent occurrences just reference the capture with '[[TN]]'.
    """
    # Find all type variables in the format 't<number>
    type_vars = re.findall(r"'t\d+", input_str)
    
    # Create a mapping from each unique type variable to its FileCheck replacement
    var_map = {}
    pattern_map = {}
    for i, var in enumerate(set(type_vars), 1):
        var_map[var] = f"'[[T{i}]]"
        pattern_map[var] = f"'[[T{i}:.+]]"
    
    # Replace each type variable with its FileCheck pattern
    result = input_str
    
    # For each unique type variable, replace only the first occurrence with the pattern
    for var in sorted(set(type_vars)):
        # Find the first occurrence and replace it with the capture pattern
        first_pos = result.find(var)
        if first_pos != -1:
            result = result[:first_pos] + pattern_map[var] + result[first_pos + len(var):]
            
            # Replace all remaining occurrences with the regular reference
            result = result.replace(var, var_map[var])
    
    # Add the CHECK: prefix
    if not result.startswith("CHECK:"):
        result = "CHECK: " + result
    
    return result

def main():
    print('(*')
    print('Auto-generated by genchecks.py on %s' % datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    # print('RUN: p3 --dump-types %s | FileCheck %s')
    if len(sys.argv) == 1:
        for line in sys.stdin:
            line = line.strip()
            if line:
                print(generate_filecheck_pattern(line))
    else:
        # Process each argument as an input string
        for arg in sys.argv[1:]:
            print(generate_filecheck_pattern(arg))
    print('*)')

if __name__ == "__main__":
    main()
